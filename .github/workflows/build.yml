name: build

on:
  pull_request:
  push:
    branches:
      - "main"

env:
  SRC_DIR: safe_autonomy_simulation
  PY_VER: "3.10"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Install Dependencies
        run: uv sync --group pipeline
      - name: Markdown Lint
        continue-on-error: true
        uses: articulate/actions-markdownlint@v1
      - name: Ruff Format Check
        continue-on-error: true
        run: uv run ruff format --check ${{ env.SRC_DIR }}
      - name: Ruff Lint
        continue-on-error: true
        run: uv run ruff check ${{ env.SRC_DIR }}
      - name: Black Format Check
        continue-on-error: true
        run: uv run black --check --diff ${{ env.SRC_DIR }}
      - name: Mypy
        continue-on-error: true
        run: uv run mypy ${{ env.SRC_DIR }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Install Dependencies
        run: uv sync --group test
      - name: Run tests
        run: |
          uv run pytest test --cov=${{ env.SRC_DIR }}
      - name: Package
        run: uv build
      - name: Store Package
        uses: actions/upload-artifact@v4
        with:
          name: package-distributions
          path: dist/
  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ github.ref_name != 'main' && needs.test.result == 'success' && !startsWith(github.event.head_commit.message, 'chore(release):') }}
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
  release-main:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ github.ref_name == 'main' && needs.test.result == 'success' && !startsWith(github.event.head_commit.message, 'chore(release):') }}
    environment:
      name: release
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git

